#include <iostream>#include <opencv2/opencv.hpp>int x_pos = 0;int deltay = 20;int auto_find_roi(cv::Mat img);int main(){	cv::Mat img, img_roi;		img = imread("Full_Laser.jpg", cv::IMREAD_GRAYSCALE);		if (img.empty()){		std::cout << "Image File Not Found" << std::endl;		std::cin.get(); //wait for any key press		return -1;	}		int auto_roi_y = auto_find_roi(img);	std::cout << "Return :" << auto_roi_y << std::endl;	auto_roi_y -= (deltay/2);	//cv::Rect(x, y, width, height)	img_roi = img(cv::Rect(x_pos, auto_roi_y, img.cols, deltay));		cv::namedWindow("ori", cv::WINDOW_AUTOSIZE);	cv::namedWindow("roi", cv::WINDOW_AUTOSIZE);		cv::imshow("ori",img);	cv::imshow("roi",img_roi);	cv::waitKey(0);	std::cout<< "Done" << std::endl;	return 0;}int auto_find_roi(cv::Mat img){	try{		int numb_all;		int numb;		std::vector<int> img_numb(img.cols);				for(int y = 0; y < img.rows; y++){			numb_all = 0;			//uchar* ptr = img.ptr<uchar>(y);			for(int x = 0; x < img.cols; x++){				numb = img.at<uchar>(y,x);				numb_all += numb;			}			img_numb[y] = numb_all;			//std::cout << img_numb[y] << std::endl;		}		//find max element		//std::vector<int>::iterator mmax = std::max_element(img_numb.begin(), img_numb.end());				//find max element index		int mindex = std::max_element(img_numb.begin(), img_numb.end()) - img_numb.begin();				return mindex;	}catch(std::exception &e){		std::cerr << "Exception: " << e.what()<< std::endl;	}	return 0;}